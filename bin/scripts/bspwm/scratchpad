#!/usr/bin/bash

CONF_PATH="$HOME/bin/scripts/files/monitors"

if [ -z $1 ]; then
	echo "Usage: in case no flag is given script toggles scratchpad window if window in argument doesn't exists script rsw will be called with same argument as was scratchpad and such window will be created."
	echo "In case flag -h or argument --hide is used program will hide every window given as argument after the flag."
	exit
fi


if [ "$1" == "--hide" ] || [ "$1" == "-h" ]; then
	for var in $@ ; do
		if [ ! "$var" == "--hide" ] && [ ! "$var" == "-h" ] ; then
			pids=$(xdotool search --class ${var})
			for pid in $pids; do
				echo $pid
				if ! bspc query -N -n "$pid.hidden" > /dev/null; then
					bspc node $pid --flag hidden -f
				fi
			done
		fi
	done
	exit
fi

pids=$(xdotool search --class ${1})

if [ -z "$pids" ] ; then
	rsw $1
	while [[ -z "$pids" ]]; do
		pids=$(xdotool search --class ${1})
	done
fi

[ "$(wc -w <<< "$pids")" -gt "1" ] && notify-send -t 800 " multiple same $1's open"


for pid in $pids; do
	if bspc query -N -n "$pid.hidden" > /dev/null; then
		EDP_X=50 EDP_Y=50
		HDMI_X=50 HDMI_Y=50
		DP_X=50 DP_Y=50

		if [ -f $CONF_PATH ]; then
			layout=$(sed '1q;d' $CONF_PATH)
			case $layout in
				"ultra"|"sultra") # 2560x1080 connected to DP1
					EDP_X=50 EDP_Y=75
					HDMI_X=50 HDMI_Y=25
					DP_X=50 DP_Y=25 ;;
				"4k") # 3840x2160 connected to DP1
					EDP_X=48 EDP_Y=83
					HDMI_X=0 HDMI_Y=0
					DP_X=50 DP_Y=31 ;;
				"triple") # 1920x1080 connected to HDMI1 and DP1
					EDP_X=25 EDP_Y=75
					HDMI_X=25 HDMI_Y=25
					DP_X=75 DP_Y=25 ;;
				"1080p") # 1920x1080 connected to HDMI1
					EDP_X=50 EDP_Y=75
					HDMI_X=50 HDMI_Y=25
					DP_X=50 DP_Y=25 ;;
				*)
					EDP_X=50 EDP_Y=50
					HDMI_X=50 HDMI_Y=50
					DP_X=50 DP_Y=50 ;;
			esac

		fi


		case "$(bspc query -M -m --names)" in
			"eDP1" | "eDP-1")
				xdotool windowmove $pid $EDP_X% $EDP_Y% ;;
			"HDMI1" | "HDMI-1" | "HDMI2" | "HDMI-2")
				xdotool windowmove $pid $HDMI_X% $HDMI_Y% ;;
			*)
				xdotool windowmove $pid $DP_X% $DP_Y% ;;
		esac

		width=$(($(xdotool getwindowgeometry --shell $pid | grep WIDTH | awk -F "=" '{print $2}')/2))
		height=$(($(xdotool getwindowgeometry --shell $pid | grep HEIGHT | awk -F "=" '{print $2}')/2))
		xdotool windowmove --relative $pid -$width -$height
	fi
	bspc node $pid --flag hidden -f
done
exit
